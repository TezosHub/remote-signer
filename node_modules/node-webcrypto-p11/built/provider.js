"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
const events_1 = require("events");
const TOKEN_WATCHER_INTERVAL = 4e3;
class Provider extends events_1.EventEmitter {
    constructor(lib) {
        super();
        this.library = lib;
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    once(event, listener) {
        return super.once(event, listener);
    }
    open(watch) {
        this.getInfo((info) => {
            this.emit("listening", info);
            let length = info.providers.length;
            if (watch) {
                this.interval = setInterval(() => {
                    this.getInfo((info2) => {
                        const length2 = info2.providers.length;
                        if (length2 !== length) {
                            const difference = this.findDifference(info.providers, info2.providers);
                            this.emit("token", difference);
                            info = info2;
                            length = length2;
                        }
                    });
                }, TOKEN_WATCHER_INTERVAL);
            }
        });
    }
    stop() {
        clearInterval(this.interval);
    }
    findDifference(a, b) {
        a = a.filter((A) => {
            let found = false;
            b = b.filter((B) => {
                if (A.serialNumber === B.serialNumber) {
                    found = true;
                    return false;
                }
                return true;
            });
            return !found;
        });
        return {
            removed: a,
            added: b,
        };
    }
    getInfo(cb) {
        childProcess.exec(`node ${__dirname}/watcher.js ${this.library}`, (error, stdout, stderr) => {
            if (error) {
                this.emit("error", error);
            }
            else {
                try {
                    const json = JSON.parse(stdout);
                    if ("message" in json) {
                        this.emit("error", new Error(json.message));
                    }
                    else {
                        cb(json);
                    }
                }
                catch (err) {
                    this.emit("error", new Error("Cannot parse info from watcher."));
                }
            }
        });
    }
}
exports.Provider = Provider;
