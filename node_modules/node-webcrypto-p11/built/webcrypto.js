"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webcrypto = require("webcrypto-core");
const WebCryptoError = webcrypto.WebCryptoError;
const graphene_pk11_1 = require("graphene-pk11");
const cert_storage_1 = require("./cert_storage");
const key_storage_1 = require("./key_storage");
const subtle_1 = require("./subtle");
const utils = require("./utils");
const ERR_RANDOM_VALUE_LENGTH = "Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length (%1) exceeds the number of bytes of entropy available via this API (65536).";
let _global = global;
_global.btoa = (data) => new Buffer(data, "binary").toString("base64");
_global.atob = (data) => new Buffer(data, "base64").toString("binary");
class WebCrypto {
    constructor(props) {
        const mod = this.module = graphene_pk11_1.Module.load(props.library, props.name);
        try {
            if (props.libraryParameters) {
                mod.initialize({
                    libraryParameters: props.libraryParameters,
                });
            }
            else {
                mod.initialize();
            }
        }
        catch (e) {
            if (!/CKR_CRYPTOKI_ALREADY_INITIALIZED/.test(e.message)) {
                throw e;
            }
        }
        this.initialized = true;
        const slotIndex = props.slot || 0;
        const slots = mod.getSlots(true);
        if (!(0 <= slotIndex && slotIndex < slots.length)) {
            throw new WebCryptoError(`Slot by index ${props.slot} is not found`);
        }
        this.slot = slots.items(slotIndex);
        this.token = this.slot.getToken();
        this.isLoginRequired = !!(this.token.flags & graphene_pk11_1.TokenFlag.LOGIN_REQUIRED);
        this.isLoggedIn = !this.isLoginRequired;
        this.isReadWrite = !!props.readWrite;
        this.open(props.readWrite);
        if (props.pin && this.isLoginRequired) {
            this.login(props.pin);
        }
        for (const i in props.vendors) {
            graphene_pk11_1.Mechanism.vendor(props.vendors[i]);
        }
        this.subtle = new subtle_1.SubtleCrypto(this);
        this.keyStorage = new key_storage_1.KeyStorage(this);
        this.certStorage = new cert_storage_1.CertificateStorage(this);
    }
    open(rw) {
        let flags = graphene_pk11_1.SessionFlag.SERIAL_SESSION;
        if (rw) {
            flags |= graphene_pk11_1.SessionFlag.RW_SESSION;
        }
        this.session = this.slot.open(flags);
        this.info = utils.getProviderInfo(this.session.slot);
    }
    reset() {
        if (this.isLoggedIn && this.isLoginRequired) {
            this.logout();
        }
        this.session.close();
        this.open(this.isReadWrite);
    }
    login(pin) {
        if (!this.isLoginRequired) {
            return;
        }
        try {
            this.session.login(pin);
        }
        catch (error) {
            if (!/CKR_USER_ALREADY_LOGGED_IN\:256/.test(error.message)) {
                throw error;
            }
        }
        this.isLoggedIn = true;
    }
    logout() {
        if (!this.isLoginRequired) {
            return;
        }
        try {
            this.session.logout();
        }
        catch (error) {
            if (!/CKR_USER_NOT_LOGGED_IN\:257/.test(error.message)) {
                throw error;
            }
        }
        this.isLoggedIn = false;
    }
    getRandomValues(array) {
        if (array.byteLength > 65536) {
            const error = new webcrypto.WebCryptoError(ERR_RANDOM_VALUE_LENGTH, array.byteLength);
            error.code = 22;
            throw error;
        }
        const bytes = new Uint8Array(this.session.generateRandom(array.byteLength));
        array.set(bytes);
        return array;
    }
    close() {
        if (this.initialized) {
            this.session.logout();
            this.session.close();
            this.module.finalize();
            this.module.close();
        }
    }
}
exports.WebCrypto = WebCrypto;
