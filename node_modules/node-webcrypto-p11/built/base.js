"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webcrypto = require("webcrypto-core");
const WebCryptoError = webcrypto.WebCryptoError;
class BaseCrypto extends webcrypto.BaseCrypto {
    static generateKey(algorithm, extractable, keyUsages, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static digest(algorithm, data, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static sign(algorithm, key, data, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static verify(algorithm, key, signature, data, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static encrypt(algorithm, key, data, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static decrypt(algorithm, key, data, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static deriveBits(algorithm, baseKey, length, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static exportKey(format, key, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static importKey(format, keyData, algorithm, extractable, keyUsages, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static wrapKey(format, key, wrappingKey, wrapAlgorithm, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages, session) {
        return new Promise((resolve, reject) => {
            this.checkSession(session);
            resolve(undefined);
        });
    }
    static checkSession(session) {
        if (!session) {
            throw new WebCryptoError("Parameter 'session' is required");
        }
    }
}
exports.BaseCrypto = BaseCrypto;
